import unittest
from binary_search_tree import *

class TestLab4(unittest.TestCase):

    def test_simple(self):
        bst = BinarySearchTree()
        self.assertTrue(bst.is_empty())
        bst.insert(10, 'stuff')
        self.assertTrue(bst.search(10))
        self.assertEqual(bst.find_min(), (10, 'stuff'))
        bst.insert(10, 'other')
        self.assertEqual(bst.find_max(), (10, 'other'))
        self.assertEqual(bst.tree_height(), 0)
        self.assertEqual(bst.inorder_list(), [10])
        self.assertEqual(bst.preorder_list(), [10])
        self.assertEqual(bst.level_order_list(), [10])

    def test_empty(self):
        bst = BinarySearchTree()
        self.assertTrue(bst.is_empty())
        self.assertEqual(bst.find_max(), None)
        self.assertEqual(bst.find_min(), None)
        self.assertEqual(bst.tree_height(), None)
        self.assertEqual(bst.inorder_list(), [])
        self.assertEqual(bst.preorder_list(), [])
        self.assertEqual(bst.level_order_list(), [])

    def test_hardstuff_1(self):
        """testing for harder functions beyond level 1"""
        bst = BinarySearchTree()

        self.assertEqual(bst.tree_height(), None)

        self.assertFalse(bst.search(10))
        self.assertEqual(bst.find_min(), None)
        self.assertEqual(bst.find_max(), None)
        self.assertEqual(bst.inorder_list(), [])
        self.assertEqual(bst.preorder_list(), [])
        self.assertEqual(bst.level_order_list(), [])

        bst.insert(10, 'root')
        self.assertFalse(bst.is_empty())
        self.assertTrue(bst.search(10))
        self.assertFalse(bst.search(100))
        self.assertEqual(bst.tree_height(), 0)
        self.assertEqual(bst.inorder_list(), [10])
        self.assertEqual(bst.preorder_list(), [10])
        self.assertEqual(bst.level_order_list(), [10])
        self.assertEqual(bst.find_min(), (10, 'root'))
        self.assertEqual(bst.find_max(), (10, 'root'))

        self.assertFalse(bst.search(20))

        bst.insert(20, 'level 1')
        self.assertTrue(bst.search(20))
        self.assertFalse(bst.search(100))
        self.assertEqual(bst.tree_height(), 1)
        self.assertEqual(bst.inorder_list(), [10, 20])
        self.assertEqual(bst.preorder_list(), [10, 20])
        self.assertEqual(bst.level_order_list(), [10, 20])
        self.assertEqual(bst.find_min(), (10, 'root'))
        self.assertEqual(bst.find_max(), (20, 'level 1'))

        bst.insert(30, 'level 2')
        self.assertTrue(bst.search(30))
        self.assertFalse(bst.search(100))
        self.assertEqual(bst.tree_height(), 2)
        self.assertEqual(bst.inorder_list(), [10, 20, 30])
        self.assertEqual(bst.preorder_list(), [10, 20, 30])
        self.assertEqual(bst.level_order_list(), [10, 20, 30])
        self.assertEqual(bst.find_min(), (10, 'root'))
        self.assertEqual(bst.find_max(), (30, 'level 2'))

        bst.insert(5, 'level 1')
        self.assertTrue(bst.search(5))
        self.assertFalse(bst.search(100))
        self.assertEqual(bst.tree_height(), 2)
        self.assertEqual(bst.inorder_list(), [5, 10, 20, 30])
        self.assertEqual(bst.preorder_list(), [10, 5, 20, 30])
        self.assertEqual(bst.level_order_list(), [10, 5, 20, 30])
        self.assertEqual(bst.find_min(), (5, 'level 1'))
        self.assertEqual(bst.find_max(), (30, 'level 2'))

        bst.insert(0, 'level 2')
        self.assertTrue(bst.search(0))
        self.assertFalse(bst.search(100))
        self.assertEqual(bst.tree_height(), 2)
        self.assertEqual(bst.inorder_list(), [0, 5, 10, 20, 30])
        self.assertEqual(bst.preorder_list(), [10, 5, 0, 20, 30])
        self.assertEqual(bst.level_order_list(), [10, 5, 20, 0, 30])
        self.assertEqual(bst.find_min(), (0, 'level 2'))
        self.assertEqual(bst.find_max(), (30, 'level 2'))

        bst.insert(15, 'level 2')
        self.assertTrue(bst.search(15))
        self.assertFalse(bst.search(100))
        self.assertEqual(bst.tree_height(), 2)
        self.assertEqual(bst.inorder_list(), [0, 5, 10, 15, 20, 30])
        self.assertEqual(bst.preorder_list(), [10, 5, 0, 20, 15, 30])
        self.assertEqual(bst.level_order_list(), [10, 5, 20, 0, 15, 30])
        self.assertEqual(bst.find_min(), (0, 'level 2'))
        self.assertEqual(bst.find_max(), (30, 'level 2'))

        bst.insert(25, 'level 3')
        self.assertTrue(bst.search(25))
        self.assertFalse(bst.search(100))
        self.assertEqual(bst.tree_height(), 3)
        self.assertEqual(bst.inorder_list(), [0, 5, 10, 15, 20, 25, 30])
        self.assertEqual(bst.preorder_list(), [10, 5, 0, 20, 15, 30, 25])
        self.assertEqual(bst.level_order_list(), [10, 5, 20, 0, 15, 30, 25])
        self.assertEqual(bst.find_min(), (0, 'level 2'))
        self.assertEqual(bst.find_max(), (30, 'level 2'))

        bst.insert(30, 'still level 2')
        self.assertTrue(bst.search(30))
        self.assertFalse(bst.search(100))
        self.assertEqual(bst.tree_height(), 3)
        self.assertEqual(bst.inorder_list(), [0, 5, 10, 15, 20, 25, 30])
        self.assertEqual(bst.preorder_list(), [10, 5, 0, 20, 15, 30, 25])
        self.assertEqual(bst.level_order_list(), [10, 5, 20, 0, 15, 30, 25])
        self.assertEqual(bst.find_min(), (0, 'level 2'))
        self.assertEqual(bst.find_max(), (30, 'still level 2'))

        bst.insert(40, 'level 3')
        self.assertTrue(bst.search(30))
        self.assertFalse(bst.search(100))
        self.assertEqual(bst.tree_height(), 3)
        self.assertEqual(bst.inorder_list(), [0, 5, 10, 15, 20, 25, 30, 40])
        self.assertEqual(bst.preorder_list(), [10, 5, 0, 20, 15, 30, 25, 40])
        self.assertEqual(bst.level_order_list(), [10, 5, 20, 0, 15, 30, 25, 40])
        self.assertEqual(bst.find_min(), (0, 'level 2'))
        self.assertEqual(bst.find_max(), (40, 'level 3'))

if __name__ == '__main__': 
    unittest.main()
